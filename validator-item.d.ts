import { ValidatorError } from './validator-error';
import { ValidatorRule } from './validator-rule';
import { ValidatorBase } from './validator-base';
import { Dict } from 'epdoc-util';
export declare class ValidatorItem extends ValidatorBase {
    protected _value: any;
    protected _changes?: Dict;
    protected _refDoc?: Dict;
    protected _name?: string;
    protected _label?: string;
    constructor(value: any, parent?: ValidatorBase);
    name(name: string): this;
    getName(): string | undefined;
    label: any;
    readonly errors: ValidatorError[];
    readonly value: any;
    hasValue(): boolean;
    changes: Dict;
    refDoc: Dict;
    validate(rule: ValidatorRule): this;
    protected valueApply(rule: ValidatorRule): this;
    protected nullApply(val: any, rule: ValidatorRule): this;
    protected setResult(val: any): this;
    protected booleanApply(val: any, rule: ValidatorRule): this;
    protected stringApply(val: any, rule: ValidatorRule): this;
    protected applyStringLengthTests(val: any, rule: ValidatorRule): this;
    protected numberApply(val: any, rule: ValidatorRule): ValidatorItem;
    protected applyNumberLimitTests(val: any, rule: ValidatorRule): this;
    protected dateApply(val: any, rule: ValidatorRule): any;
    protected applyDateLimitTests(val: any, rule: ValidatorRule): this;
    protected objectApply(val: any, rule: ValidatorRule): ValidatorItem;
    protected propertiesApply(rule: ValidatorRule): this;
    protected arrayApply(val: any, rule: ValidatorRule): this;
    protected getDefault(rule: ValidatorRule): any;
}
